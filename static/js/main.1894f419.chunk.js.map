{"version":3,"sources":["logo.svg","frag/utils.js","frag/Editor.js","App.js","reportWebVitals.js","index.js"],"names":["clamp","x","a","b","Math","max","min","flatstep","useAnimationFrame","callback","requestRef","React","useRef","previousTimeRef","animate","time","undefined","current","deltaTime","requestAnimationFrame","useEffect","cancelAnimationFrame","Ammo","window","THREE","require","cloneDeep","tmpTrans","TRAINING_EPSILON","STAGE_FREE","STAGE_FREE_ASSER_0","STAGE_TRAINING_ALT","STAGE_TRAINING_VROT","INITIAL_SIM_DATA","battery","batteryChart","yChart","vyChart","throttle","ms","stage","pids","alt","p","i","d","accI","simTime","deltaToSim","training","maxspeed","currentErrAcc","errs","currentDir","target","t","sin","PI","pow","camera","position","lookAt","followPos","followLook","init","canvas","scene","renderer","Scene","WebGLRenderer","antialias","setSize","innerWidth","innerHeight","background","Color","PerspectiveCamera","set","Vector3","hemiLight","HemisphereLight","color","setHSL","groundColor","add","dirLight","DirectionalLight","multiplyScalar","castShadow","shadow","mapSize","width","height","left","right","top","bottom","far","setClearColor","setPixelRatio","devicePixelRatio","gammaInput","gammaOutput","shadowMap","enabled","pos","y","z","scale","Mesh","BoxBufferGeometry","MeshPhongMaterial","receiveShadow","createTarget","createBlock","physicsWorld","quat","blockPlane","transform","btTransform","setIdentity","setOrigin","btVector3","setRotation","btQuaternion","motionState","btDefaultMotionState","colShape","btBoxShape","setMargin","localInertia","calculateLocalInertia","rbInfo","btRigidBodyConstructionInfo","body","btRigidBody","addRigidBody","resetRigidBodies","rigidBodies","length","objThree","objAmmo","userData","physicsBody","removeRigidBody","destroy","getCollisionShape","getMotionState","e","console","error","remove","createDrone","droneData","mass","totalMass","motorUpdateGraphicSpeedArray","group","Group","radius","mcd_meters","motorCenterDistance","type","forEach","angle","motor","SphereBufferGeometry","push","speed","material","setValues","floor","createMotor","cos","createRod","sx","sy","sz","rod","rotation","rodX","rodZ","rodY","tempVec","tempQuat","setActivationState","reset","state","keepSimTraining","sim","setupPhysicsWorld","collisionConfiguration","btDefaultCollisionConfiguration","dispatcher","btCollisionDispatcher","overlappingPairCache","btDbvtBroadphase","solver","btSequentialImpulseConstraintSolver","btDiscreteDynamicsWorld","setGravity","transformer","trans","basis","getBasis","basisMat","getRow","basisMatTranspo","EditorFrag","stateRef","canvasRef","useState","motorKV","motorMass","motorLiftPerWatt","escMass","batteryMass","batteryS","batteryP","batteryC","batteryCapacity","frameMass","v","mA","w","j","setDroneData_","simData","setSimData","droneComputed","setDroneComputed","setDroneData","arg","setTimeout","addEventListener","event","keys","key","setInterval","log","alive","newDrone","drone","computeMaxElec","test","dt","gpds","navigator","getGamepads","gp","id","includes","axes","buttons","value","startTime","performance","now","simulateOneStep","stepSimulation","droneAmmo","getWorldTransform","getOrigin","transformerInst","vy","getLinearVelocity","q","setWorldTransform","ty","altErr","abs","pContrib","dContrib","iContrib","batteryDrain","oldBattery","wattCons","lift","liftVec","relPos","applyImpulse","fullQuadThrust","contrib","k","s","reduce","acc","amax","map","index","commandPower","rpx","rpz","torque","orthoX","orthoZ","liftVecWorld","liftPosWorld","freeThrust","oldSim","l","stepDone","msPerStep","step","getRotation","rx","ry","rz","fx","fy","fz","quaternion","updatePhysics","c1","render","style","display","flexDirection","overflow","toFixed","Chart","name","arrf","pid","dpid","borderRadius","padding","cursor","onClick","parseFloat","active","border","ref","flex","overflowY","NumberIn","unit","setValue","old","TextOut","justifyContent","textAlign","alignItems","onChange","fl","marginLeft","disabled","lastComputeIndex","setCurrent","h","arr","ctx","getContext","fillStyle","fillRect","split","toY","toX","beginPath","moveTo","lineTo","strokeStyle","stroke","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1894f419.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nexport let clamp = (x, a, b) => Math.max(a, Math.min(b, x));\nexport let flatstep = (a, b, x) => clamp((x - a) / (b - a), 0, 1);\nexport let ease = (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\nexport let smoothstep = (a, b, x) => ease(flatstep(a, b, x));\nexport let mix = (a, b, m) => a * (1.0 - m) + b * m;\nexport const useAnimationFrame = (callback) => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef();\n  const previousTimeRef = React.useRef();\n\n  const animate = (time) => {\n    if (previousTimeRef.current != undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []); // Make sure the effect runs only once\n};\n\nexport function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\nexport function hsv2rgb(h, s, v) {\n  let f = (n, k = (n + h / 60) % 6) =>\n    v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\n","import React, { useState } from \"react\";\nimport { useEffect, useRef } from \"react\";\nimport {\n  clamp,\n  flatstep,\n  smoothstep,\n  useAnimationFrame,\n  hsv2rgb,\n} from \"./utils\";\n\nlet Ammo = window.Ammo;\n\nconst THREE = require(\"three\");\n\n// const { GLTFLoader } = require(\"three/examples/jsm/loaders/GLTFLoader\");\n\nconst qs = require(\"query-string\");\nvar cloneDeep = require(\"lodash.clonedeep\");\n\nvar _ = require(\"lodash\");\n\nlet tmpTrans = null;\n\n// const DISTANCE_UNIT = [\"mm\", \"m\", \"cm\", \"inch\", \"foot\"];\n\n// function distanceToMeter(v, u) {\n//   if (u == \"mm\") return v / 1000;\n//   if (u == \"m\") return v;\n//   if (u == \"cm\") return v / 100;\n//   if (u == \"inch\") return 2.54 / 100;\n//   if (u == \"foot\") return v * 0.3048;\n//   return v;\n// }\n\nconst TRAINING_TIME_MS = 20000;\n\nconst TRAINING_EPSILON = 0.001;\n\nconst STAGE_FREE = \"Free\";\nconst STAGE_FREE_ASSER_0 = \"Free (angular position, altitude)\";\nconst STAGE_TRAINING_ALT = \"Training altitude PID\";\nconst STAGE_TRAINING_VROT = \"Training angular position PID\";\n\nconst INITIAL_DRONE_DATA = () => {\n  return {\n    type: \"quadrotor x\",\n    motorCenterDistance: 1000, //mm\n    motorKV: 10000, // RPM/V\n    motorMass: 20, //g\n    motorLiftPerWatt: 0.02, //N/W\n    escMass: 20, //g\n    batteryMass: 100, //g\n    batteryS: 2,\n    batteryP: 1,\n    batteryC: 45, // h-1\n    batteryCapacity: 850, // mAh\n    frameMass: 100, //g\n    totalMass: 0,\n    v: 0,\n    mA: 0,\n    w: 0,\n    j: 0,\n  };\n};\nconst INITIAL_SIM_DATA = () => {\n  return {\n    battery: 100,\n    batteryChart: [],\n    yChart: [],\n    vyChart: [],\n    throttle: 0,\n    ms: 0,\n    stage: STAGE_FREE,\n    pids: {\n      alt: {\n        p: 1,\n        i: 0,\n        d: 0,\n\n        accI: [],\n      },\n    },\n    simTime: 0,\n    deltaToSim: 0,\n    training: {\n      maxspeed: true,\n      alt: {\n        currentErrAcc: 0,\n        errs: [],\n        p: 0.1,\n        i: 1 / 1000,\n        d: 1 / 100,\n        currentDir: \"p\",\n        target: (t) =>\n          2 +\n          1.5 *\n            flatstep(\n              -0.1,\n              0.1,\n              Math.sin(Math.PI * 2 * 2 * Math.pow(t / 15000, 2))\n            ),\n      },\n    },\n    camera: {\n      position: [-4, 1.7, 0],\n      lookAt: [0, 1.7, 0],\n      followPos: false,\n      followLook: true,\n    },\n  };\n};\n\nfunction init(canvas) {\n  let camera, scene, renderer;\n\n  scene = new THREE.Scene();\n\n  renderer = new THREE.WebGLRenderer({ canvas: canvas, antialias: true });\n  renderer.setSize(window.innerWidth - 300, window.innerHeight);\n\n  ///\n  //create the scene\n  scene = new THREE.Scene();\n  scene.background = new THREE.Color(0xbfd1e5);\n\n  //create camera\n  camera = new THREE.PerspectiveCamera(\n    70,\n    (window.innerWidth - 300) / window.innerHeight,\n    0.2,\n    5000\n  );\n  camera.position.set(-4, 1.7, 0);\n  camera.lookAt(new THREE.Vector3(0, 1.7, 0));\n\n  // let loader = new GLTFLoader();\n  // loader.load(\n  //   process.env.PUBLIC_URL + \"/static/coords.gltf\",\n  //   (gltf) => {\n  //     scene.add(gltf.scene);\n  //   },\n  //   () => {},\n  //   (error) => {\n  //     console.error(error);\n  //   }\n  // );\n\n  //Add hemisphere light\n  let hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.1);\n  hemiLight.color.setHSL(0.6, 0.6, 0.6);\n  hemiLight.groundColor.setHSL(0.1, 1, 0.4);\n  hemiLight.position.set(0, 50, 0);\n  scene.add(hemiLight);\n\n  //Add directional light\n  let dirLight = new THREE.DirectionalLight(0xffffff, 1);\n  dirLight.color.setHSL(0.1, 1, 0.95);\n  dirLight.position.set(-1, 1.75, 1);\n  dirLight.position.multiplyScalar(100);\n  scene.add(dirLight);\n\n  dirLight.castShadow = true;\n\n  dirLight.shadow.mapSize.width = 2048;\n  dirLight.shadow.mapSize.height = 2048;\n\n  let d = 10;\n\n  dirLight.shadow.camera.left = -d;\n  dirLight.shadow.camera.right = d;\n  dirLight.shadow.camera.top = d;\n  dirLight.shadow.camera.bottom = -d;\n\n  dirLight.shadow.camera.far = 13500;\n\n  renderer.setClearColor(0xbfd1e5);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(window.innerWidth - 300, window.innerHeight);\n\n  renderer.gammaInput = true;\n  renderer.gammaOutput = true;\n\n  renderer.shadowMap.enabled = true;\n\n  let target = createTarget({ scene });\n\n  return { camera, scene, renderer, target };\n}\n\nfunction createTarget({ scene }) {\n  let pos = { x: 0, y: 3, z: 0 };\n  let scale = { x: 0.1, y: 0.1, z: 0.1 };\n  //threeJS Section\n  let target = new THREE.Mesh(\n    new THREE.BoxBufferGeometry(),\n    new THREE.MeshPhongMaterial({ color: 0xff00ff })\n  );\n  target.position.set(pos.x, pos.y, pos.z);\n  target.scale.set(scale.x, scale.y, scale.z);\n  target.castShadow = true;\n  target.receiveShadow = true;\n  scene.add(target);\n  return (x, y, z) => target.position.set(x, y, z);\n}\n\nfunction createBlock({ physicsWorld, scene }) {\n  let pos = { x: 0, y: -1, z: 0 };\n  let scale = { x: 20, y: 2, z: 20 };\n  let quat = { x: 0, y: 0, z: 0, w: 1 };\n  let mass = 0;\n\n  //threeJS Section\n  let blockPlane = new THREE.Mesh(\n    new THREE.BoxBufferGeometry(),\n    new THREE.MeshPhongMaterial({ color: 0xa0afa4 })\n  );\n\n  blockPlane.position.set(pos.x, pos.y, pos.z);\n  blockPlane.scale.set(scale.x, scale.y, scale.z);\n\n  blockPlane.castShadow = true;\n  blockPlane.receiveShadow = true;\n\n  scene.add(blockPlane);\n\n  //Ammojs Section\n  let transform = new Ammo.btTransform();\n  transform.setIdentity();\n  transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));\n  transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));\n  let motionState = new Ammo.btDefaultMotionState(transform);\n\n  let colShape = new Ammo.btBoxShape(\n    new Ammo.btVector3(scale.x * 0.5, scale.y * 0.5, scale.z * 0.5)\n  );\n  colShape.setMargin(0.05);\n\n  let localInertia = new Ammo.btVector3(0, 0, 0);\n  colShape.calculateLocalInertia(mass, localInertia);\n\n  let rbInfo = new Ammo.btRigidBodyConstructionInfo(\n    mass,\n    motionState,\n    colShape,\n    localInertia\n  );\n  let body = new Ammo.btRigidBody(rbInfo);\n\n  physicsWorld.addRigidBody(body);\n}\n\nfunction resetRigidBodies({ physicsWorld, scene, rigidBodies }) {\n  for (let i = 0; i < rigidBodies.length; i++) {\n    let objThree = rigidBodies[i];\n    let objAmmo = objThree.userData.physicsBody;\n\n    physicsWorld.removeRigidBody(objAmmo);\n    try {\n      Ammo.destroy(objAmmo.getCollisionShape());\n      Ammo.destroy(objAmmo.getMotionState());\n      Ammo.destroy(objAmmo);\n    } catch (e) {\n      console.error(e);\n    }\n\n    scene.remove(objThree);\n  }\n  rigidBodies.length = 0;\n}\n\nfunction createDrone({ physicsWorld, scene, rigidBodies, droneData }) {\n  let pos = { x: 0, y: 3, z: 0 };\n\n  let quat = { x: 0, y: 0, z: 0, w: 1 };\n  let mass = droneData.totalMass / 1000;\n\n  let motorUpdateGraphicSpeedArray = [];\n  let group = new THREE.Group();\n  let radius = 2 / 100;\n  let mcd_meters = droneData.motorCenterDistance / 1000;\n  if (droneData.type === \"quadrotor x\") {\n    let createMotor = (x, y, z) => {\n      let motor = new THREE.Mesh(\n        new THREE.SphereBufferGeometry(radius),\n        new THREE.MeshPhongMaterial({ color: 0xff0505 })\n      );\n      motor.position.set(x, y, z);\n      motor.castShadow = true;\n      group.add(motor);\n      motorUpdateGraphicSpeedArray.push((speed) => {\n        motor.material.setValues({\n          color: new THREE.Color(\n            \"hsl(\" +\n              speed * 360 +\n              \", 100%, \" +\n              Math.floor(20 + 80 * speed) +\n              \"%)\"\n          ),\n        });\n      });\n      return motor;\n    };\n\n    let angles = [\n      ((1 + 0) * Math.PI) / 4,\n      ((1 + 2) * Math.PI) / 4,\n      ((1 + 4) * Math.PI) / 4,\n      ((1 + 6) * Math.PI) / 4,\n    ];\n    angles.forEach((angle) => {\n      let x = mcd_meters * Math.sin(angle);\n      let y = mcd_meters * Math.cos(angle);\n      let m = createMotor(x, 0, y);\n    });\n\n    let createRod = (sx, sy, sz) => {\n      let rod = new THREE.Mesh(\n        new THREE.BoxBufferGeometry(sx, sy, sz),\n        new THREE.MeshPhongMaterial({ color: 0x000000 })\n      );\n      rod.position.set(0, 0, 0);\n      rod.castShadow = true;\n      group.add(rod);\n      return rod;\n    };\n\n    let rod1 = createRod(mcd_meters * 2, radius / 2, radius / 2);\n    rod1.rotation.set(0, Math.PI / 4, 0);\n    let rod2 = createRod(mcd_meters * 2, radius / 2, radius / 2);\n    rod2.rotation.set(0, -Math.PI / 4, 0);\n\n    let rodX = new THREE.Mesh(\n      new THREE.BoxBufferGeometry(mcd_meters, radius / 2, radius / 2),\n      new THREE.MeshPhongMaterial({ color: 0xff0000 })\n    );\n    rodX.position.set(mcd_meters / 2, radius, 0);\n    rodX.castShadow = true;\n    group.add(rodX);\n\n    let rodZ = new THREE.Mesh(\n      new THREE.BoxBufferGeometry(mcd_meters, radius / 2, radius / 2),\n      new THREE.MeshPhongMaterial({ color: 0x00ff00 })\n    );\n    rodZ.position.set(0, radius, mcd_meters / 2);\n    rodZ.rotation.set(0, Math.PI / 2, 0);\n    rodZ.castShadow = true;\n    group.add(rodZ);\n\n    let rodY = new THREE.Mesh(\n      new THREE.BoxBufferGeometry(mcd_meters, radius / 2, radius / 2),\n      new THREE.MeshPhongMaterial({ color: 0x0000ff })\n    );\n    rodY.position.set(0, mcd_meters / 2, 0);\n    rodY.rotation.set(0, 0, Math.PI / 2);\n    rodY.castShadow = true;\n    group.add(rodY);\n  }\n\n  group.position.set(pos.x, pos.y, pos.z);\n  // group.rotation.set(0, Math.PI, 0);\n\n  group.castShadow = true;\n  group.receiveShadow = true;\n\n  scene.add(group);\n\n  //Ammojs Section\n  let transform = new Ammo.btTransform();\n  transform.setIdentity();\n  let tempVec = new Ammo.btVector3(pos.x, pos.y, pos.z);\n  transform.setOrigin(tempVec);\n  Ammo.destroy(tempVec);\n\n  let tempQuat = new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w);\n  transform.setRotation(tempQuat);\n  Ammo.destroy(tempQuat);\n  let motionState = new Ammo.btDefaultMotionState(transform);\n  Ammo.destroy(transform);\n\n  let colShape = new Ammo.btBoxShape(\n    new Ammo.btVector3(\n      droneData.motorCenterDistance / 1000,\n      2 / 100,\n      droneData.motorCenterDistance / 1000\n    )\n  );\n  colShape.setMargin(0.05);\n\n  let localInertia = new Ammo.btVector3(0, 0, 0);\n  colShape.calculateLocalInertia(mass, localInertia);\n\n  let rbInfo = new Ammo.btRigidBodyConstructionInfo(\n    mass,\n    motionState,\n    colShape,\n    localInertia\n  );\n  let body = new Ammo.btRigidBody(rbInfo);\n\n  body.setActivationState(4);\n\n  group.userData.physicsBody = body;\n  group.userData.motorUpdateGraphicSpeedArray = motorUpdateGraphicSpeedArray;\n  physicsWorld.addRigidBody(body);\n\n  rigidBodies.push(group);\n}\n\nfunction reset(state, keepSimTraining = true) {\n  resetRigidBodies(state);\n  createDrone(state);\n  if (keepSimTraining) {\n    let { pids, training, stage } = state.sim;\n    state.sim = INITIAL_SIM_DATA();\n    state.sim.pids = pids;\n    state.sim.training = training;\n    state.sim.stage = stage;\n  } else {\n    state.sim = INITIAL_SIM_DATA();\n  }\n}\n\nfunction setupPhysicsWorld() {\n  let collisionConfiguration = new Ammo.btDefaultCollisionConfiguration(),\n    dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration),\n    overlappingPairCache = new Ammo.btDbvtBroadphase(),\n    solver = new Ammo.btSequentialImpulseConstraintSolver();\n\n  let physicsWorld = new Ammo.btDiscreteDynamicsWorld(\n    dispatcher,\n    overlappingPairCache,\n    solver,\n    collisionConfiguration\n  );\n  physicsWorld.setGravity(new Ammo.btVector3(0, -9.8, 0));\n\n  tmpTrans = new Ammo.btTransform();\n  return physicsWorld;\n}\nfunction transformer(trans) {\n  let basis = trans.getBasis();\n  let basisMat = [\n    basis.getRow(0).x(),\n    basis.getRow(0).y(),\n    basis.getRow(0).z(),\n    basis.getRow(1).x(),\n    basis.getRow(1).y(),\n    basis.getRow(1).z(),\n    basis.getRow(2).x(),\n    basis.getRow(2).y(),\n    basis.getRow(2).z(),\n  ];\n\n  let basisMatTranspo = [\n    basisMat[0],\n    basisMat[3],\n    basisMat[6],\n    basisMat[1],\n    basisMat[4],\n    basisMat[7],\n    basisMat[2],\n    basisMat[5],\n    basisMat[8],\n  ];\n\n  return (x, y, z) => {\n    return [\n      basisMatTranspo[0 * 3 + 0] * x +\n        basisMatTranspo[1 * 3 + 0] * y +\n        basisMatTranspo[2 * 3 + 0] * z,\n      basisMatTranspo[0 * 3 + 1] * x +\n        basisMatTranspo[1 * 3 + 1] * y +\n        basisMatTranspo[2 * 3 + 1] * z,\n      basisMatTranspo[0 * 3 + 2] * x +\n        basisMatTranspo[1 * 3 + 2] * y +\n        basisMatTranspo[2 * 3 + 2] * z,\n    ];\n  };\n}\nfunction updatePhysics(state, deltaTime) {\n  // Step world\n\n  let startTime = performance.now();\n  state.sim.deltaToSim = deltaTime;\n  state.sim.simTime = 0;\n  if (state.droneData) {\n    let simulateOneStep = (state) => {\n      let { sim, rigidBodies, physicsWorld, droneData } = state;\n\n      physicsWorld.stepSimulation(0.001, 0);\n\n      let drone = rigidBodies[0];\n      let droneAmmo = drone.userData.physicsBody;\n      let motorUpdateGraphicSpeedArray =\n        drone.userData.motorUpdateGraphicSpeedArray;\n      droneAmmo.getMotionState().getWorldTransform(tmpTrans);\n      let [x, y, z] = [\n        tmpTrans.getOrigin().x(),\n        tmpTrans.getOrigin().y(),\n        tmpTrans.getOrigin().z(),\n      ];\n\n      let transformerInst = transformer(tmpTrans);\n\n      let [vx, vy, vz] = [\n        droneAmmo.getLinearVelocity().x(),\n        droneAmmo.getLinearVelocity().y(),\n        droneAmmo.getLinearVelocity().z(),\n      ];\n\n      let fullQuadThrust = () => {\n        let batteryDrain =\n          (sim.throttle * (100 * (droneData.batteryC * (1 / 1000)))) / 3600;\n\n        let oldBattery = sim.battery;\n        sim.battery = Math.max(0, sim.battery - batteryDrain);\n        batteryDrain = oldBattery - sim.battery;\n        let jouleCons = (batteryDrain / 100) * droneData.j;\n        let wattCons = jouleCons / 0.001;\n        let lift = droneData.motorLiftPerWatt * wattCons;\n\n        let liftVec = new Ammo.btVector3(0, lift / 1000, 0);\n        let relPos = new Ammo.btVector3(0, 0, 0);\n        droneAmmo.applyImpulse(liftVec, relPos);\n        Ammo.destroy(liftVec);\n        Ammo.destroy(relPos);\n      };\n\n      let freeThrust = () => {\n        let contrib = [0, 0, 0, 0];\n\n        let keys = {};\n        [\"z\", \"s\", \"q\", \"d\", \"e\", \"a\"].forEach(\n          (k) => (keys[k] = state.keys[k] === true ? 1 : 0)\n        );\n        let { z, s, q, d, a, e } = keys;\n\n        let axes = state.keys.axes || [0, 0, 0, 0];\n\n        z += -axes[1] * 0.5 + 0.5;\n        s += axes[1] * 0.5 + 0.5;\n        q += -axes[0] * 0.5 + 0.5;\n        d += axes[0] * 0.5 + 0.5;\n        a += -axes[2] * 0.5 + 0.5;\n        e += axes[2] * 0.5 + 0.5;\n\n        let t = -axes[3] * 0.5 + 0.5;\n\n        contrib[0] += -z + s + q - d + e - a;\n        contrib[1] += -z + s - q + d - e + a;\n        contrib[2] += z - s - q + d + e - a;\n        contrib[3] += z - s + q - d - e + a;\n\n        let min = contrib.reduce((acc, x) => Math.min(acc, x));\n        let max = contrib.reduce((acc, x) => Math.max(acc, x));\n\n        let amax = Math.max(Math.abs(min), max);\n        if (amax < 1) amax = 1;\n\n        contrib = contrib.map((x) => x / amax);\n\n        if (sim.ms % 500 === 0) {\n          console.log(\"Contrib\", contrib);\n        }\n\n        contrib.forEach((motor, index) => {\n          let commandPower = clamp(sim.throttle + t + motor, 0, 1);\n          let batteryDrain =\n            (0.25 *\n              (commandPower * (100 * (droneData.batteryC * (1 / 1000))))) /\n            3600;\n\n          motorUpdateGraphicSpeedArray[index](commandPower);\n\n          let oldBattery = sim.battery;\n          sim.battery = Math.max(0, sim.battery - batteryDrain);\n          batteryDrain = oldBattery - sim.battery;\n          let jouleCons = (batteryDrain / 100) * droneData.j;\n          let wattCons = jouleCons / 0.001;\n          let lift = droneData.motorLiftPerWatt * wattCons;\n\n          let rpx,\n            rpy,\n            rpz = 0;\n\n          let angle = ((1 + 2 * index) * Math.PI) / 4;\n          let mcd_meters = droneData.motorCenterDistance / 1000;\n          rpx = mcd_meters * Math.sin(angle);\n          rpz = mcd_meters * Math.cos(angle);\n\n          let torque = (0.1 * lift) / 1000;\n          let orthoX = -Math.cos(angle) * torque * (index % 2 == 0 ? 1 : -1);\n          let orthoZ = Math.sin(angle) * torque * (index % 2 == 0 ? 1 : -1);\n\n          let liftVecWorld = new Ammo.btVector3(\n            ...transformerInst(orthoX, lift / 1000, orthoZ)\n          );\n\n          let liftPosWorld = new Ammo.btVector3(\n            ...transformerInst(rpx, 0, rpz)\n          );\n\n          droneAmmo.applyImpulse(liftVecWorld, liftPosWorld);\n\n          Ammo.destroy(liftPosWorld);\n          Ammo.destroy(liftVecWorld);\n        });\n      };\n\n      if (sim.stage === STAGE_TRAINING_ALT) {\n        {\n          //RESET ORIENTATION\n          droneAmmo.getMotionState().getWorldTransform(tmpTrans);\n          let quat = { x: 0, y: 0, z: 0, w: 1 };\n          let q = new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w);\n          tmpTrans.setRotation(q);\n          Ammo.destroy(q);\n          droneAmmo.getMotionState().setWorldTransform(tmpTrans);\n        }\n\n        let ty = state.sim.training.alt.target(sim.ms);\n        state.target(0, ty, 0);\n\n        let altErr = ty - y;\n        if (sim.ms >= 0)\n          state.sim.training.alt.currentErrAcc += Math.pow(\n            Math.abs(altErr / 100),\n            1\n          );\n\n        sim.pids.alt.accI = sim.pids.alt.accI + altErr / 100;\n        sim.pids.alt.accI *= 0.995;\n\n        sim.pids.alt.pContrib = sim.pids.alt.p * altErr;\n        sim.pids.alt.dContrib = -sim.pids.alt.p * sim.pids.alt.d * vy;\n        sim.pids.alt.iContrib =\n          sim.pids.alt.p * sim.pids.alt.i * sim.pids.alt.accI;\n\n        sim.throttle = clamp(\n          sim.pids.alt.pContrib + sim.pids.alt.dContrib + sim.pids.alt.iContrib,\n          0,\n          1\n        );\n\n        fullQuadThrust();\n      }\n\n      if (sim.stage === STAGE_FREE) {\n        freeThrust();\n      }\n\n      if (sim.ms % 30 === 0) {\n        sim.batteryChart.push(sim.battery);\n        sim.yChart.push(y);\n        sim.vyChart.push(vy);\n      }\n\n      sim.ms += 1;\n\n      let trainingSeshOver =\n        [STAGE_TRAINING_VROT, STAGE_TRAINING_ALT].includes(sim.stage) &&\n        sim.ms >= TRAINING_TIME_MS;\n      if (trainingSeshOver) {\n        let oldSim = state.sim;\n\n        reset(state);\n        state.sim.training = oldSim.training;\n        state.sim.pids = oldSim.pids;\n\n        //Adjust pid\n\n        console.log(\n          state.sim.training.alt.errs.length +\n            \" : \" +\n            state.sim.training.alt.currentErrAcc +\n            \" / \",\n          state.sim.pids.alt.p +\n            \"/\" +\n            state.sim.pids.alt.i +\n            \"/\" +\n            state.sim.pids.alt.d\n        );\n        if (state.sim.training.alt.errs.length > 0) {\n          let before =\n            state.sim.training.alt[state.sim.training.alt.currentDir];\n          if (\n            state.sim.training.alt.currentErrAcc <\n            state.sim.training.alt.errs[state.sim.training.alt.errs.length - 1]\n          ) {\n            // console.log(\"WAS GOOD\");\n\n            state.sim.training.alt[state.sim.training.alt.currentDir] *= 1.2;\n          } else {\n            // console.log(\"WAS BAD\");\n            state.sim.training.alt[state.sim.training.alt.currentDir] *= -0.5;\n          }\n        }\n\n        state.sim.training.alt.errs.push(state.sim.training.alt.currentErrAcc);\n        state.sim.training.alt.currentErrAcc = 0;\n        state.sim.training.alt.currentDir =\n          state.sim.training.alt.currentDir === \"p\"\n            ? \"d\"\n            : state.sim.training.alt.currentDir === \"d\"\n            ? \"i\"\n            : \"p\";\n\n        state.sim.pids.alt[state.sim.training.alt.currentDir] +=\n          state.sim.training.alt[state.sim.training.alt.currentDir];\n\n        state.sim.pids.alt[state.sim.training.alt.currentDir] = Math.max(\n          0,\n          state.sim.pids.alt[state.sim.training.alt.currentDir]\n        );\n\n        state.sim.training.alt.accI = 0;\n\n        if (state.sim.training.alt.errs.length > 5) {\n          let a = state.sim.training.alt.errs;\n          let l = a.length;\n          if (\n            Math.abs(a[l - 5] - a[l - 4]) / a[l - 4] < TRAINING_EPSILON &&\n            Math.abs(a[l - 4] - a[l - 3]) / a[l - 3] < TRAINING_EPSILON &&\n            Math.abs(a[l - 3] - a[l - 2]) / a[l - 2] < TRAINING_EPSILON &&\n            Math.abs(a[l - 2] - a[l - 1]) / a[l - 1] < TRAINING_EPSILON\n          ) {\n            state.sim.stage = STAGE_FREE;\n            state.sim.training.maxspeed = false;\n          }\n        }\n      }\n    };\n\n    let notMaxSpeed =\n      ![STAGE_TRAINING_VROT, STAGE_TRAINING_ALT].includes(state.sim.stage) ||\n      !state.sim.training.maxspeed;\n    if (notMaxSpeed) {\n      for (let step = 0; step < deltaTime; step++) {\n        simulateOneStep(state);\n      }\n    } else {\n      let stepDone = 0;\n      let msPerStep = 1;\n      while (\n        performance.now() - startTime + msPerStep <\n        Math.min(deltaTime, 1000 / 60)\n      ) {\n        simulateOneStep(state);\n        stepDone += 1;\n        msPerStep = (performance.now() - startTime) / stepDone;\n      }\n    }\n  }\n  state.sim.simTime = performance.now() - startTime;\n  // Update rigid bodies\n  for (let i = 0; i < state.rigidBodies.length; i++) {\n    let objThree = state.rigidBodies[i];\n    let objAmmo = objThree.userData.physicsBody;\n    let ms = objAmmo.getMotionState();\n    if (ms) {\n      ms.getWorldTransform(tmpTrans);\n      let p = tmpTrans.getOrigin();\n      let q = tmpTrans.getRotation();\n      objThree.position.set(p.x(), p.y(), p.z());\n\n      let transformerInst = transformer(tmpTrans);\n\n      if (state.sim.camera.followPos) {\n        let [rx, ry, rz] = transformerInst(-2, 0.5, 0);\n        let [fx, fy, fz] = transformerInst(1, 0, 0);\n        state.camera.position.set(p.x() + rx, p.y() + ry, p.z() + rz);\n        state.camera.lookAt(p.x() + fx, p.y() + fy, p.z() + fz);\n      } else if (state.sim.camera.followLook) {\n        state.camera.lookAt(p.x(), p.y(), p.z());\n      }\n\n      objThree.quaternion.set(q.x(), q.y(), q.z(), q.w());\n    }\n  }\n}\n\nfunction computeTotalMass(drone) {\n  return {\n    totalMass:\n      drone.escMass * 4 +\n      drone.motorMass * 4 +\n      drone.batteryMass +\n      drone.frameMass,\n  };\n}\n\nfunction computeMaxElec(drone) {\n  let v = drone.batteryS * 3.7;\n  let mA = drone.batteryC * drone.batteryCapacity; //mA\n  let w = (v * mA) / 1000;\n  let j = ((drone.batteryCapacity * 3600) / 1000) * v;\n  return { v, mA, w, j };\n}\n\nexport default function EditorFrag() {\n  let stateRef = useRef(null);\n  let canvasRef = useRef();\n  let [droneData, setDroneData_] = useState(INITIAL_DRONE_DATA());\n  let [simData, setSimData] = useState(INITIAL_SIM_DATA());\n  let [droneComputed, setDroneComputed] = useState(false);\n  function setDroneData(arg) {\n    setDroneData_(arg);\n    setDroneComputed(false);\n  }\n\n  useEffect(() => {\n    setTimeout(() => {\n      window.addEventListener(\"keydown\", function (event) {\n        if (stateRef.current) {\n          stateRef.current.keys[event.key] = true;\n        }\n      });\n      window.addEventListener(\"keyup\", function (event) {\n        if (stateRef.current) {\n          stateRef.current.keys[event.key] = false;\n        }\n      });\n    }, 50);\n  }, []);\n\n  useEffect(() => {\n    setInterval(() => {\n      console.log(stateRef.current);\n    }, 5000);\n  }, []);\n\n  useEffect(() => {\n    if (droneComputed) {\n      if (stateRef.current?.alive) {\n        stateRef.current.droneData = droneData;\n        reset(stateRef.current, false);\n      }\n    } else {\n      let newDrone = {\n        ...cloneDeep(droneData),\n        ...computeMaxElec(droneData),\n        ...computeTotalMass(droneData),\n      };\n      if (stateRef.current?.alive) stateRef.current.droneData = newDrone;\n      setDroneData_(newDrone);\n      setDroneComputed(true);\n    }\n  }, [droneData, droneComputed]);\n  useEffect(() => {\n    async function test() {\n      console.log(\"Trying to load Ammo.js\");\n      try {\n        Ammo = await Ammo();\n\n        stateRef.current = init(canvasRef.current);\n        stateRef.current.physicsWorld = setupPhysicsWorld();\n\n        stateRef.current.rigidBodies = [];\n        createBlock(stateRef.current);\n        stateRef.current.alive = true;\n        setDroneComputed(false);\n        stateRef.current.sim = INITIAL_SIM_DATA();\n        stateRef.current.keys = {};\n      } catch (e) {\n        console.error(\"ammo: \", e);\n        setTimeout(() => test(), 500);\n      }\n    }\n    if (Ammo?.btDefaultCollisionConfiguration == undefined) test();\n  }, []);\n\n  useAnimationFrame((dt) => {\n    if (stateRef.current != null) {\n      let {\n        camera,\n        scene,\n        renderer,\n        keys,\n        sim,\n        droneData,\n        rigidBodies,\n        physicsWorld,\n      } = stateRef.current;\n\n      let gpds = navigator.getGamepads();\n      for (let i = 0; i < gpds.length; i++) {\n        let gp = gpds[i];\n        if (gp && gp.id.includes(\"Sony\")) {\n          keys.axes = [\n            gp.axes[0],\n            gp.axes[1],\n            gp.buttons[6].value * 2 - 1,\n            gp.buttons[7].value * 2 - 1,\n          ];\n        }\n      }\n\n      if (rigidBodies.length > 0) updatePhysics(stateRef.current, dt);\n      let c1 = cloneDeep(sim);\n      setSimData(c1);\n      renderer.render(scene, camera);\n    }\n  });\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n\n        background: \"rgb(62, 62, 62)\",\n        overflow: \"hidden\",\n      }}\n    >\n      <div style={{ position: \"relative\", overflow: \"hidden\" }}>\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"10px\",\n            left: \"10px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n          }}\n        >\n          <div> {simData.ms.toFixed(2) + \"ms\"}</div>\n          <div> {simData.simTime.toFixed(2) + \"ms\"}</div>\n          <div> {simData.deltaToSim.toFixed(2) + \"ms\"}</div>\n\n          <Chart\n            name={\"battery\"}\n            arrf={() => stateRef.current?.sim?.batteryChart}\n          ></Chart>\n          <Chart name={\"y\"} arrf={() => stateRef.current?.sim?.yChart}></Chart>\n\n          <Chart\n            name={\"errs\"}\n            arrf={() => stateRef.current?.sim?.training.alt.errs}\n          ></Chart>\n          <div>\n            {(() => {\n              let pid = simData.pids.alt;\n              let dpid = simData.training.alt;\n              return (\n                <div>\n                  <div>\n                    p: {pid.p} + {dpid.p}\n                  </div>\n                  <div>\n                    i: {pid.i} + {dpid.i}\n                  </div>\n                  <div>\n                    d: {pid.d} + {dpid.d}\n                  </div>\n                </div>\n              );\n            })()}\n          </div>\n\n          <div>\n            <span>p</span>\n            <input\n              type=\"range\"\n              min=\"-1\"\n              max=\"1\"\n              step=\"0.01\"\n              value={simData.pids.alt.pContrib}\n            ></input>\n          </div>\n          <div>\n            <span>i</span>\n            <input\n              type=\"range\"\n              min=\"-1\"\n              max=\"1\"\n              step=\"0.01\"\n              value={simData.pids.alt.iContrib}\n            ></input>\n          </div>\n          <div>\n            <span>d</span>\n            <input\n              type=\"range\"\n              min=\"-1\"\n              max=\"1\"\n              step=\"0.01\"\n              value={simData.pids.alt.dContrib}\n            ></input>\n          </div>\n        </div>\n\n        <div\n          style={{\n            position: \"absolute\",\n            bottom: \"10px\",\n            left: \"50%\",\n            transform: \"translate(-50%,0%)\",\n          }}\n        >\n          <div\n            style={{\n              background: \"rgba(0,0,0,0.2)\",\n              borderRadius: \"5px\",\n              padding: \"5px\",\n              color: \"white\",\n              cursor: \"pointer\",\n            }}\n            onClick={() =>\n              (stateRef.current.sim.training.maxspeed =\n                !stateRef.current.sim.training.maxspeed)\n            }\n          >\n            MAX SPEED : {simData.training.maxspeed ? \"True\" : \"False\"}\n          </div>\n\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"1\"\n            value=\"0\"\n            step=\"0.01\"\n            value={simData.throttle}\n            onChange={(e) =>\n              (stateRef.current.sim.throttle = parseFloat(e.target.value))\n            }\n          ></input>\n        </div>\n\n        {/* General sim  */}\n        <div\n          style={{\n            position: \"absolute\",\n            bottom: \"10px\",\n            right: \"10px\",\n            // transform: \"translate(-50%,0%)\",\n            background: \"rgba(0,0,0,0.2)\",\n            padding: \"20px\",\n          }}\n        >\n          {[\n            STAGE_FREE,\n            STAGE_FREE_ASSER_0,\n            STAGE_TRAINING_ALT,\n            STAGE_TRAINING_VROT,\n          ].map((stage) => {\n            let active = simData.stage === stage;\n            return (\n              <div\n                onClick={() => {\n                  reset(stateRef.current, true);\n                  stateRef.current.sim.stage = stage;\n                }}\n                style={{\n                  cursor: active ? \"auto\" : \"pointer\",\n                  border: active ? \"1px solid green\" : \"none\",\n                }}\n              >\n                {stage}\n              </div>\n            );\n          })}\n        </div>\n        <canvas ref={canvasRef} style={{ flex: \"1 1 auto\" }}></canvas>\n      </div>\n\n      <div style={{ width: \"300px\", overflowY: \"auto\", height: \"100%\" }}>\n        <NumberIn\n          name={\"motor center distance\"}\n          unit={\"mm\"}\n          value={droneData.motorCenterDistance}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, motorCenterDistance: v };\n            })\n          }\n        ></NumberIn>\n\n        <NumberIn\n          name={\"motor kv\"}\n          unit={\"RPM/V\"}\n          value={droneData.motorKV}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, motorKV: v };\n            })\n          }\n        ></NumberIn>\n\n        <NumberIn\n          name={\"single motor mass\"}\n          unit={\"g\"}\n          value={droneData.motorMass}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, motorMass: v };\n            })\n          }\n        ></NumberIn>\n        <NumberIn\n          name={\"motor lift\"}\n          unit={\"N/W\"}\n          value={droneData.motorLiftPerWatt}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, motorLiftPerWatt: v };\n            })\n          }\n        ></NumberIn>\n\n        <NumberIn\n          name={\"single esc mass\"}\n          unit={\"g\"}\n          value={droneData.escMass}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, escMass: v };\n            })\n          }\n        ></NumberIn>\n        <NumberIn\n          name={\"battery mass\"}\n          unit={\"g\"}\n          value={droneData.batteryMass}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, batteryMass: v };\n            })\n          }\n        ></NumberIn>\n        <NumberIn\n          name={\"battery capacity\"}\n          unit={\"mAh\"}\n          value={droneData.batteryCapacity}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, batteryCapacity: v };\n            })\n          }\n        ></NumberIn>\n        <NumberIn\n          name={\"battery S\"}\n          unit={\"\"}\n          value={droneData.batteryS}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, batteryS: v };\n            })\n          }\n        ></NumberIn>\n\n        <NumberIn\n          name={\"battery P\"}\n          unit={\"\"}\n          value={droneData.batteryP}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, batteryP: v };\n            })\n          }\n        ></NumberIn>\n        <NumberIn\n          name={\"battery C\"}\n          unit={\"h-1\"}\n          value={droneData.batteryC}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, batteryC: v };\n            })\n          }\n        ></NumberIn>\n        <NumberIn\n          name={\"frame mass\"}\n          unit={\"g\"}\n          value={droneData.frameMass}\n          setValue={(v) =>\n            setDroneData((old) => {\n              return { ...old, frameMass: v };\n            })\n          }\n        ></NumberIn>\n        <TextOut\n          name={\"total mass\"}\n          unit={\"g\"}\n          value={droneData.totalMass}\n        ></TextOut>\n        <TextOut name={\"total V\"} unit={\"V\"} value={droneData.v}></TextOut>\n        <TextOut\n          name={\"max current\"}\n          unit={\"mA\"}\n          value={droneData.mA}\n        ></TextOut>\n        <TextOut name={\"max power\"} unit={\"W\"} value={droneData.w}></TextOut>\n      </div>\n    </div>\n  );\n}\n\nfunction NumberIn({ name, unit, value, setValue }) {\n  return (\n    <div\n      style={{\n        color: \"white\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        padding: \"10px\",\n      }}\n    >\n      <div style={{ textAlign: \"left\" }}>{name}</div>\n      <div\n        style={{\n          color: \"white\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n          width: \"120px\",\n          flex: \"none\",\n        }}\n      >\n        <input\n          style={{ width: \"60px\" }}\n          value={value}\n          type=\"number\"\n          onChange={(e) => {\n            let fl = parseFloat(e.target.value);\n            setValue(fl);\n          }}\n        ></input>{\" \"}\n        <span style={{ marginLeft: \"5px\" }}>{unit}</span>\n      </div>\n    </div>\n  );\n}\n\nfunction TextOut({ name, unit, value }) {\n  return (\n    <div\n      style={{\n        color: \"white\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        padding: \"10px\",\n      }}\n    >\n      <div style={{ textAlign: \"left\" }}>{name}</div>\n      <div\n        style={{\n          color: \"white\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-start\",\n          alignItems: \"center\",\n          width: \"120px\",\n          flex: \"none\",\n        }}\n      >\n        <input disabled style={{ width: \"60px\" }} value={value}></input>{\" \"}\n        <span style={{ marginLeft: \"5px\" }}>{unit}</span>\n      </div>\n    </div>\n  );\n}\n\nconst INIT_CHART = () => {\n  return {\n    min: 9999,\n    max: -9999,\n    lastComputeIndex: -1,\n  };\n};\nfunction Chart({ arrf, name }) {\n  let ref = useRef();\n\n  let stateRef = useRef(INIT_CHART());\n  let [current, setCurrent] = useState(0);\n  let w = 200;\n  let h = 200;\n  useAnimationFrame((dt) => {\n    //\n    let arr = arrf();\n    if (!ref.current || !arr || !stateRef.current) return;\n\n    if (stateRef.current.lastComputeIndex > arr.length - 1)\n      stateRef.current = INIT_CHART();\n\n    let state = stateRef.current;\n    ref.current.width = w;\n    ref.current.height = h;\n    let ctx = ref.current.getContext(\"2d\");\n    ctx.width = w;\n    ctx.height = h;\n    ctx.fillStyle = \"rgba(0,0,0,0.2)\";\n    ctx.fillRect(0, 0, w, h);\n\n    if (arr.length > 0) setCurrent(arr[arr.length - 1]);\n\n    for (let i = state.lastComputeIndex + 1; i < arr.length; i++) {\n      state.min = Math.min(state.min, arr[i]);\n      state.max = Math.max(state.max, arr[i]);\n    }\n    state.lastComputeIndex = arr.length - 1;\n    let split = state.max - state.min;\n    let max = state.max + split / 10;\n    let min = state.min - split / 10;\n\n    let toY = (v) => h - (h * (v - min)) / (max - min);\n    let toX = (v) => (v * w) / (arr.length - 1);\n    ctx.beginPath();\n    ctx.moveTo(toX(0), toY(arr[0] || 0));\n    arr.forEach((v, i) => {\n      ctx.lineTo(toX(i), toY(v));\n    });\n    ctx.strokeStyle = \"#fff\";\n    ctx.stroke();\n  });\n\n  return (\n    <div\n      style={{\n        border: \"1px solid black\",\n        background: \"rgba(0,0,0,0.6)\",\n        color: \"white\",\n        width: w + \"px\",\n      }}\n    >\n      <div>\n        {name}: {current.toFixed(2)}\n      </div>\n      <canvas ref={ref} style={{ width: w + \"px\", height: h + \"px\" }}></canvas>\n    </div>\n  );\n}\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport EditorFrag from \"./frag/Editor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EditorFrag></EditorFrag>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}